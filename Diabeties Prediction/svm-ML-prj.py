# -*- coding: utf-8 -*-
"""miniproject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VrxD77VAnN2xwRJlRo_O-NHnBXeFhBY4
"""

import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

class SVM:
    def __init__(self, learning_rate=0.01, lambda_param=0.01, n_iters=1000):
        self.lr = learning_rate
        self.lambda_param = lambda_param
        self.n_iters = n_iters
        self.w = None
        self.b = None
        
    def fit(self, X, y):
        n_samples, n_features = X.shape
        
        y_ = np.where(y <= 0, -1, 1)
        
        self.w = np.zeros(n_features)
        self.b = 0
        
        for _ in range(self.n_iters):
            for idx, x_i in enumerate(X):
                condition = y_[idx] * (np.dot(x_i, self.w) - self.b) >= 1
                if condition:
                    self.w -= self.lr * (2 * self.lambda_param * self.w)
                else:
                    self.w -= self.lr * (2 * self.lambda_param * self.w - np.dot(x_i, y_[idx]))
                    self.b -= self.lr * y_[idx]
                    
    def predict(self, X):
        approx = np.dot(X, self.w) - self.b
        return np.where(approx <= 0, 0, 1)

# load diabetes dataset
diabetes_data = np.loadtxt("diabetes.csv", delimiter=",", skiprows=1)

# split data into features and target variable
X = diabetes_data[:, :-1]
y = diabetes_data[:, -1]

# split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# standardize the data
X_train_mean = np.mean(X_train, axis=0)
X_train_std = np.std(X_train, axis=0)
X_train = (X_train - X_train_mean) / X_train_std
X_test = (X_test - X_train_mean) / X_train_std

# train the SVM model
svm = SVM()
svm.fit(X_train, y_train)

# make predictions on the testing set
y_pred = svm.predict(X_test)

# calculate accuracy of the model
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# count the number of 0's and 1's in the last column
count_0 = np.count_nonzero(diabetes_data[:, -1] == 0)
count_1 = np.count_nonzero(diabetes_data[:, -1] == 1)

print("Non-Diabetic:", count_0)
print("Diabetic:", count_1)

# predict on new input instance
new_instance = np.array([11,143,94,33,146,36.6,0.254,51])
new_instance = (new_instance - X_train_mean) / X_train_std
prediction = svm.predict(new_instance.reshape(1,-1))
#print("Prediction:", prediction[0])
if prediction[0] == 0:
    print("The person is non-diabetic")
else:
    print("The person is diabetic")